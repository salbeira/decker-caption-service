#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var sessions = require("../session");
var debug = require("debug")("decker-sync:server");
var http = require("http");

var ws = require("ws");
const { versions } = require("process");

const config = require("../config.json");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || config.application_port || "3100");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  var wss = new ws.WebSocketServer({
    path: "/api/websocket",
    port: config.websocket_port || "3101",
  });
  wss.on("connection", function connection(ws) {
    ws.on("message", function message(data) {
      try {
        data = JSON.parse(data);
        if (data.session) {
          let session = sessions.getSession(data.session);
          if (session) {
            session.connect(ws);
          } else {
            ws.close();
          }
          return;
        }
        if (data.type === "ping") {
          ws.send(JSON.stringify({ type: "pong", text: "" }));
          return;
        }
      } catch (error) {
        console.error(data);
        console.error(error);
      }
    });
    ws.on("close", function close(data) {
      let session = ws.caption_session;
      if (session) {
        session.disconnect(ws);
      }
    });
  });

  setInterval(() => sessions.cleanup(), 1000 * 60);
}
